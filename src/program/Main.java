package program;


import entity.DAO;
import java.util.List;
import entity.User;
import entity.UserDAO;
import java.awt.Image;
import entity.*;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;
import javax.swing.JSlider;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author stevenblaivas
 */
public class Main extends javax.swing.JFrame {
    private static DAO userDAO;
    private static DAO reviewDAO;
    private static DAO productDAO;
    
    /*ImageIcon imageMBP16 = new ImageIcon("MBP16.png");
    Image image = imageMBP16.getImage();
    Image newimg = image.getScaledInstance(10, 10,  java.awt.Image.SCALE_SMOOTH);
    ImageIcon imageMBP162 = new ImageIcon(newimg); 
    */


    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        refreshUsersTable();
        refreshProductTable();
        refreshReviewTable();
        this.setLocationRelativeTo(null);
        jLabelMacbookpro16.setText("");
        jLabelMBA13.setText("");
        jLabelMacMini.setText("");
        jLabelAppleWatch8.setText("");
        jLabelAppleWatchUltra.setText("");
        jLabeliPhone14.setText("");
        jLabeliPhone14Pro.setText("");
        jLabeliPadAir.setText("");
        jLabeliPadPro.setText("");
        jLabelAirpods.setText("");
        jLabelAirpodsPro.setText("");
        


       
       
      
        
            
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButtonEnter = new javax.swing.JButton();
        jTextFieldUsertID = new javax.swing.JTextField();
        jTextFieldLastName = new javax.swing.JTextField();
        jTextFieldFirstName = new javax.swing.JTextField();
        jLabelLastName = new javax.swing.JLabel();
        jLabelFirstName = new javax.swing.JLabel();
        jLabelUserId = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabelTitle = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableUser = new javax.swing.JTable();
        jButtonUserUpdate = new javax.swing.JButton();
        jButtonUserDelete = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabelProductID = new javax.swing.JLabel();
        jLabelProductType = new javax.swing.JLabel();
        jLabelName = new javax.swing.JLabel();
        jTextFieldProductID = new javax.swing.JTextField();
        jTextFieldProductType = new javax.swing.JTextField();
        jTextFieldProductName = new javax.swing.JTextField();
        jLabelPrice = new javax.swing.JLabel();
        jTextFieldPrice = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextDescription = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jLabelMacbookpro16 = new javax.swing.JLabel();
        jLabelMBA13 = new javax.swing.JLabel();
        jLabelMacMini = new javax.swing.JLabel();
        jLabelAppleWatch8 = new javax.swing.JLabel();
        jLabelAppleWatchUltra = new javax.swing.JLabel();
        jLabeliPhone14 = new javax.swing.JLabel();
        jLabeliPhone14Pro = new javax.swing.JLabel();
        jLabeliPadAir = new javax.swing.JLabel();
        jLabeliPadPro = new javax.swing.JLabel();
        jLabelAirpods = new javax.swing.JLabel();
        jLabelAirpodsPro = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableProduct = new javax.swing.JTable();
        jButtonProductEnter = new javax.swing.JButton();
        jButtonUpdate = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableReview = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabelReview = new javax.swing.JLabel();
        jTextFieldReviewID = new javax.swing.JTextField();
        jLabelReviewUserID = new javax.swing.JLabel();
        jTextFieldReviewUserID = new javax.swing.JTextField();
        jLabelRating = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextAreaReviewComment = new javax.swing.JTextArea();
        jButtonReviewEnter = new javax.swing.JButton();
        jButtonReviewUpdate = new javax.swing.JButton();
        jButtonReviewDelete = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldReviewProductID = new javax.swing.JTextField();
        jComboBoxRating = new javax.swing.JComboBox<>();
        jTextFieldReviewRating = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBackground(new java.awt.Color(153, 255, 255));
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTabbedPane1MousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jButtonEnter.setBackground(new java.awt.Color(153, 255, 153));
        jButtonEnter.setText("Enter");
        jButtonEnter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonEnterMouseClicked(evt);
            }
        });
        jButtonEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEnterActionPerformed(evt);
            }
        });

        jTextFieldUsertID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldUsertIDKeyTyped(evt);
            }
        });

        jTextFieldLastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldLastNameActionPerformed(evt);
            }
        });
        jTextFieldLastName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldLastNameKeyTyped(evt);
            }
        });

        jTextFieldFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldFirstNameActionPerformed(evt);
            }
        });
        jTextFieldFirstName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldFirstNameKeyTyped(evt);
            }
        });

        jLabelLastName.setText("Last Name");

        jLabelFirstName.setText("First Name");

        jLabelUserId.setText("User ID(# Only)");

        jLabel2.setText(" Please fill out the provided information to proceed");

        jLabelTitle.setText("Rate the Apple ");

        jTableUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "User ID", "First Name", "Last Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableUserMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTableUser);

        jButtonUserUpdate.setBackground(new java.awt.Color(153, 255, 255));
        jButtonUserUpdate.setText("Update");
        jButtonUserUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUserUpdateActionPerformed(evt);
            }
        });

        jButtonUserDelete.setBackground(new java.awt.Color(255, 51, 51));
        jButtonUserDelete.setText("Delete");
        jButtonUserDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUserDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelFirstName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelLastName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldLastName))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabelUserId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jTextFieldUsertID, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonUserUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonUserDelete))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addComponent(jLabelTitle)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 668, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabelFirstName, jLabelLastName, jLabelUserId});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextFieldFirstName, jTextFieldLastName, jTextFieldUsertID});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonEnter, jButtonUserDelete, jButtonUserUpdate});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelUserId)
                    .addComponent(jTextFieldUsertID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelFirstName)
                    .addComponent(jTextFieldFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelLastName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonUserUpdate)
                        .addComponent(jButtonUserDelete)))
                .addGap(114, 114, 114))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonEnter, jButtonUserDelete, jButtonUserUpdate});

        jTabbedPane1.addTab("User", jPanel1);

        jLabelProductID.setText("     Product ID(# only):");

        jLabelProductType.setText("           Product Type :");

        jLabelName.setText("                        Name:");

        jTextFieldProductID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldProductIDActionPerformed(evt);
            }
        });
        jTextFieldProductID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldProductIDKeyTyped(evt);
            }
        });

        jTextFieldProductType.setEditable(false);
        jTextFieldProductType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldProductTypeActionPerformed(evt);
            }
        });
        jTextFieldProductType.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldProductTypeKeyTyped(evt);
            }
        });

        jTextFieldProductName.setEditable(false);
        jTextFieldProductName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldProductNameActionPerformed(evt);
            }
        });

        jLabelPrice.setText("  Price:");

        jTextFieldPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldPriceKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldPriceKeyPressed(evt);
            }
        });

        jLabel1.setText("Description:");

        jTextDescription.setEditable(false);
        jTextDescription.setColumns(20);
        jTextDescription.setRows(5);
        jTextDescription.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextDescriptionKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(jTextDescription);

        jLabelMacbookpro16.setText("MBP16");
        jLabelMacbookpro16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabelMacbookpro16MousePressed(evt);
            }
        });

        jLabelMBA13.setText("MBA13");
        jLabelMBA13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabelMBA13MousePressed(evt);
            }
        });

        jLabelMacMini.setText("MBM");
        jLabelMacMini.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabelMacMiniMousePressed(evt);
            }
        });

        jLabelAppleWatch8.setText("AW8");
        jLabelAppleWatch8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabelAppleWatch8MousePressed(evt);
            }
        });

        jLabelAppleWatchUltra.setText("AWU");
        jLabelAppleWatchUltra.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabelAppleWatchUltraMousePressed(evt);
            }
        });

        jLabeliPhone14.setText("ip14");
        jLabeliPhone14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabeliPhone14MousePressed(evt);
            }
        });

        jLabeliPhone14Pro.setText("ip14Pro");
        jLabeliPhone14Pro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabeliPhone14ProMousePressed(evt);
            }
        });

        jLabeliPadAir.setText("iPadair");
        jLabeliPadAir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabeliPadAirMousePressed(evt);
            }
        });

        jLabeliPadPro.setText("iPadPro");
        jLabeliPadPro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabeliPadProMousePressed(evt);
            }
        });

        jLabelAirpods.setText("Airpods");
        jLabelAirpods.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabelAirpodsMousePressed(evt);
            }
        });

        jLabelAirpodsPro.setText("AirpodsPro");
        jLabelAirpodsPro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabelAirpodsProMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelMacbookpro16)
                .addGap(18, 18, 18)
                .addComponent(jLabelMBA13)
                .addGap(18, 18, 18)
                .addComponent(jLabelMacMini)
                .addGap(18, 18, 18)
                .addComponent(jLabelAppleWatch8)
                .addGap(18, 18, 18)
                .addComponent(jLabelAppleWatchUltra)
                .addGap(18, 18, 18)
                .addComponent(jLabeliPhone14)
                .addGap(18, 18, 18)
                .addComponent(jLabeliPhone14Pro)
                .addGap(18, 18, 18)
                .addComponent(jLabeliPadAir)
                .addGap(18, 18, 18)
                .addComponent(jLabeliPadPro)
                .addGap(18, 18, 18)
                .addComponent(jLabelAirpods)
                .addGap(18, 18, 18)
                .addComponent(jLabelAirpodsPro)
                .addContainerGap(423, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMacbookpro16)
                    .addComponent(jLabelMBA13)
                    .addComponent(jLabelMacMini)
                    .addComponent(jLabelAppleWatch8)
                    .addComponent(jLabelAppleWatchUltra)
                    .addComponent(jLabeliPhone14)
                    .addComponent(jLabeliPhone14Pro)
                    .addComponent(jLabeliPadAir)
                    .addComponent(jLabeliPadPro)
                    .addComponent(jLabelAirpods)
                    .addComponent(jLabelAirpodsPro))
                .addContainerGap(147, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel3);

        jTableProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Product Type", "Product Name", "Price", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableProductMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(jTableProduct);

        jButtonProductEnter.setBackground(new java.awt.Color(153, 255, 153));
        jButtonProductEnter.setText("Enter");
        jButtonProductEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProductEnterActionPerformed(evt);
            }
        });

        jButtonUpdate.setBackground(new java.awt.Color(153, 255, 255));
        jButtonUpdate.setText("Update");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jButtonDelete.setBackground(new java.awt.Color(255, 51, 51));
        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelProductType, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelPrice, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldProductType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2)
                        .addGap(12, 12, 12))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabelProductID)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldProductID, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
                            .addComponent(jButtonProductEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButtonUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonDelete))
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)))
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextFieldPrice, jTextFieldProductID, jTextFieldProductName, jTextFieldProductType});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabelName, jLabelProductID, jLabelProductType});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonDelete, jButtonProductEnter, jButtonUpdate});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelProductID)
                    .addComponent(jTextFieldProductID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelProductType)
                            .addComponent(jTextFieldProductType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelName)
                            .addComponent(jTextFieldProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPrice)
                            .addComponent(jTextFieldPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonProductEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdate)
                    .addComponent(jButtonDelete))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonDelete, jButtonProductEnter, jButtonUpdate});

        jTabbedPane1.addTab("Info", jPanel2);

        jTableReview.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Review ID", "User ID", "Product ID", "Rating", "Comment"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableReview.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableReviewMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableReview);

        jLabel3.setText("Review");

        jLabelReview.setText("Review ID(# only)");

        jTextFieldReviewID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldReviewIDActionPerformed(evt);
            }
        });
        jTextFieldReviewID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldReviewIDKeyTyped(evt);
            }
        });

        jLabelReviewUserID.setText("User ID(# only)");

        jTextFieldReviewUserID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldReviewUserIDActionPerformed(evt);
            }
        });
        jTextFieldReviewUserID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldReviewUserIDKeyTyped(evt);
            }
        });

        jLabelRating.setText("Rating");

        jLabel7.setText("Comment");

        jTextAreaReviewComment.setColumns(20);
        jTextAreaReviewComment.setRows(5);
        jTextAreaReviewComment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextAreaReviewCommentKeyTyped(evt);
            }
        });
        jScrollPane5.setViewportView(jTextAreaReviewComment);

        jButtonReviewEnter.setBackground(new java.awt.Color(153, 255, 153));
        jButtonReviewEnter.setText("Enter");
        jButtonReviewEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReviewEnterActionPerformed(evt);
            }
        });

        jButtonReviewUpdate.setBackground(new java.awt.Color(102, 255, 255));
        jButtonReviewUpdate.setText("Update");
        jButtonReviewUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReviewUpdateActionPerformed(evt);
            }
        });

        jButtonReviewDelete.setBackground(new java.awt.Color(255, 51, 51));
        jButtonReviewDelete.setText("Delete");
        jButtonReviewDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReviewDeleteActionPerformed(evt);
            }
        });

        jLabel4.setText("Product ID(# only)");

        jTextFieldReviewProductID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldReviewProductIDKeyTyped(evt);
            }
        });

        jComboBoxRating.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));
        jComboBoxRating.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRatingActionPerformed(evt);
            }
        });

        jTextFieldReviewRating.setEditable(false);
        jTextFieldReviewRating.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldReviewRatingKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelRating)
                            .addComponent(jLabel4)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(jLabel3))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTextFieldReviewID, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelReviewUserID))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTextFieldReviewUserID))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonReviewEnter)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonReviewUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonReviewDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldReviewProductID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jComboBoxRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldReviewRating))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelReview)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane5, jTextFieldReviewID, jTextFieldReviewProductID, jTextFieldReviewUserID});

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonReviewDelete, jButtonReviewEnter, jButtonReviewUpdate});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(7, 7, 7)
                .addComponent(jLabelReview)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldReviewID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelReviewUserID)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldReviewUserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addGap(2, 2, 2)
                .addComponent(jTextFieldReviewProductID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelRating)
                .addGap(4, 4, 4)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldReviewRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonReviewEnter, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonReviewUpdate, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonReviewDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonReviewDelete, jButtonReviewEnter, jButtonReviewUpdate});

        jTabbedPane1.addTab("Review", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:
        //ImageIcon imageMBP16 = new ImageIcon(new ImageIcon("MBP16.png").getImage().getScaledInstance(120, 120, Image.SCALE_DEFAULT));
        //jLabelMacbookpro16.setIcon(imageMBP16);
    }//GEN-LAST:event_jTabbedPane1MouseClicked

//GEN-FIRST:event_jTabbedPane1MousePressed
private void jTabbedPane1MousePressed(java.awt.event.MouseEvent evt){
        ImageIcon imageMBP16 = new ImageIcon(new ImageIcon("MBP16.png").getImage().getScaledInstance(120, 120, Image.SCALE_DEFAULT));
        jLabelMacbookpro16.setIcon(imageMBP16);
        
        
        ImageIcon imageMBPA13 = new ImageIcon(new ImageIcon("Macbook Air.jpeg").getImage().getScaledInstance(120, 120, Image.SCALE_DEFAULT));
        jLabelMBA13.setIcon(imageMBPA13);
        
        ImageIcon imageMM = new ImageIcon(new ImageIcon("Mac mini.jpeg").getImage().getScaledInstance(120, 120, Image.SCALE_DEFAULT));
        jLabelMacMini.setIcon(imageMM);
        
        ImageIcon imageAW8 = new ImageIcon(new ImageIcon("AppleWatch8.jpeg").getImage().getScaledInstance(120, 120, Image.SCALE_DEFAULT));
        jLabelAppleWatch8.setIcon(imageAW8);
        
        ImageIcon imageAWU = new ImageIcon(new ImageIcon("AWU.jpeg").getImage().getScaledInstance(120, 120, Image.SCALE_DEFAULT));
        jLabelAppleWatchUltra.setIcon(imageAWU);
        
        ImageIcon imageiP14 = new ImageIcon(new ImageIcon("iPhone14.jpeg").getImage().getScaledInstance(120, 120, Image.SCALE_DEFAULT));
        jLabeliPhone14.setIcon(imageiP14);
        
        ImageIcon imageiPPro = new ImageIcon(new ImageIcon("iphon14pro.jpeg").getImage().getScaledInstance(120, 120, Image.SCALE_DEFAULT));
        jLabeliPhone14Pro.setIcon(imageiPPro);
        
        ImageIcon imageIPAIR = new ImageIcon(new ImageIcon("Ipadair.jpeg").getImage().getScaledInstance(120, 120, Image.SCALE_DEFAULT));
        jLabeliPadAir.setIcon(imageIPAIR);
        
        ImageIcon imageiPadpro = new ImageIcon(new ImageIcon("Ipadair.jpeg").getImage().getScaledInstance(120, 120, Image.SCALE_DEFAULT));
        jLabeliPadPro.setIcon(imageiPadpro);
        
        ImageIcon imageAirpods = new ImageIcon(new ImageIcon("airpods.jpeg").getImage().getScaledInstance(120, 120, Image.SCALE_DEFAULT));
        jLabelAirpods.setIcon(imageAirpods);
        
         ImageIcon imageAirpodsPro = new ImageIcon(new ImageIcon("AirpodPro.jpeg").getImage().getScaledInstance(120, 120, Image.SCALE_DEFAULT));
        jLabelAirpodsPro.setIcon(imageAirpodsPro);
        
        
} 
//GEN-LAST:event_jTabbedPane1MousePressed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:
        if(!jTextFieldProductID.getText().isEmpty()){
            int ID = Integer.parseInt(jTextFieldProductID.getText().trim());
            String type = jTextFieldProductType.getText().trim();
            String description = jTextDescription.getText().trim();
             String Price = jTextFieldPrice.getText().trim();
            String PN = jTextFieldProductName.getText().trim();

            Product product = getProduct(ID);
         
            if(product.getProductID() !=-1){
               
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete Confirmation",JOptionPane.YES_NO_OPTION);
                if(option == 0){
                    deleteProduct(ID,type,PN,Price,description);
                    clearProductTextFields();
                }
                refreshProductTable();
                
               
            }

        }
        else
        {
            alert("Product does not exist", "Delete error");
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        // TODO add your handling code here:
        if(!jTextFieldProductID.getText().isEmpty() && !jTextFieldProductType.getText().isEmpty() && !jTextDescription.getText().isEmpty()){
            int ID = Integer.parseInt(jTextFieldProductID.getText().trim());
            String type = jTextFieldProductType.getText().trim();
            String description = jTextDescription.getText().trim();
            String Price = jTextFieldPrice.getText().trim();
            String PN = jTextFieldProductName.getText().trim();

            Product product = getProduct(ID);
            if(product.getProductID() !=-1){
                updateProduct(ID,type,PN,Price,description);
                refreshProductTable();
            }

        }
        else
        {
            alert("Fields does not exist", "Update error");
        }
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButtonProductEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProductEnterActionPerformed
        // TODO add your handling code here:
        if(!jTextFieldProductID.getText().isEmpty()){
            int ID = Integer.parseInt(jTextFieldProductID.getText().trim());
            String type = jTextFieldProductType.getText().trim();
            String PN = jTextFieldProductName.getText().trim();
            String Price = jTextFieldPrice.getText().trim();
            String description = jTextDescription.getText().trim();
            

            if(!primaryKeyViolaionProduct(ID)){
                addProduct(ID,type,PN,Price,description);;
                refreshProductTable();
                clearProductTextFields();

            }
        }
        else
        {
            alert("Fields cannot be empty", "Insert error");
        }
    }//GEN-LAST:event_jButtonProductEnterActionPerformed

    private void jTableProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableProductMouseClicked
        // TODO add your handling code here:
        int i = jTableProduct.getSelectedRow();
        TableModel model = jTableProduct.getModel();
        jTextFieldProductID.setText(model.getValueAt(i, 0).toString());
        jTextFieldProductType.setText(model.getValueAt(i, 1).toString());
        jTextFieldProductName.setText(model.getValueAt(i, 2).toString());
        jTextFieldPrice.setText(model.getValueAt(i, 3).toString());
        jTextDescription.setText(model.getValueAt(i, 4).toString());
    }//GEN-LAST:event_jTableProductMouseClicked

    private void jLabelAirpodsProMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelAirpodsProMousePressed
        // TODO add your handling code here:

        jTextFieldProductName.setText("Airpods Pro");
        jTextFieldPrice.setText("$250.00");
        jTextFieldProductType.setText("Headphones");
        jTextDescription.setText("take the listening experience to a new level of individuality.");
    }//GEN-LAST:event_jLabelAirpodsProMousePressed

    private void jLabelAirpodsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelAirpodsMousePressed
        // TODO add your handling code here:

        jTextFieldProductName.setText("Airpods");
        jTextFieldPrice.setText("$130.00");
         jTextFieldProductType.setText("Headphones");
        jTextDescription.setText("aded with features to assist with select hearing needs");
        
    }//GEN-LAST:event_jLabelAirpodsMousePressed

    private void jLabeliPadProMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabeliPadProMousePressed
        // TODO add your handling code here:

        jTextFieldProductName.setText("iPad Pro");
        jTextFieldPrice.setText("$799.00");
         jTextFieldProductType.setText("Tablet");
        jTextDescription.setText("transforms into an immersive drawing canvas and the world's best note‑taking device.");
    }//GEN-LAST:event_jLabeliPadProMousePressed

    private void jLabeliPadAirMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabeliPadAirMousePressed
        // TODO add your handling code here:

        jTextFieldProductName.setText("iPad Air");
        jTextFieldPrice.setText("$599.00");
         jTextFieldProductType.setText("Tablet");
        jTextDescription.setText("ith an immersive 10.9-inch Liquid Retina display and the amazing performance of the M1 chip, iPad Air is a creative and gaming powerhouse.");
    }//GEN-LAST:event_jLabeliPadAirMousePressed

    private void jLabeliPhone14ProMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabeliPhone14ProMousePressed
        // TODO add your handling code here:

        jTextFieldProductName.setText("iPhone 14 Pro");
        jTextFieldPrice.setText("$1099.00");
         jTextFieldProductType.setText("Phone");
        jTextDescription.setText(" feature a notchless display with Dynamic Island, a faster A16 chip, 48-megapixel camera, Crash Detection");
    }//GEN-LAST:event_jLabeliPhone14ProMousePressed

    private void jLabeliPhone14MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabeliPhone14MousePressed
        // TODO add your handling code here:

        jTextFieldProductName.setText("iPhone 14");
        jTextFieldPrice.setText("$799.00");
         jTextFieldProductType.setText("Phone");
        jTextDescription.setText("All-day battery life. Emergency SOS via satellite. Crash Detection. Epic photos. 6 colors.");
    }//GEN-LAST:event_jLabeliPhone14MousePressed

    private void jLabelAppleWatchUltraMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelAppleWatchUltraMousePressed
        // TODO add your handling code here:

        jTextFieldProductName.setText("Apple Watch Ultra");
        jTextFieldPrice.setText("$799.00");
         jTextFieldProductType.setText("Wearable");
        jTextDescription.setText("high-end wearable built for extreme activities in harsh environments. ");
    }//GEN-LAST:event_jLabelAppleWatchUltraMousePressed

    private void jLabelAppleWatch8MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelAppleWatch8MousePressed
        // TODO add your handling code here:

        jTextFieldProductName.setText("Apple Watch Series 8");
        jTextFieldPrice.setText("$449.00");
         jTextFieldProductType.setText("Wearable");
        jTextDescription.setText("Apple Watch Series 8 features temperature sensing for insights into women's health, Car Crash Detection, and sleep stages to understand your sleep.");
    }//GEN-LAST:event_jLabelAppleWatch8MousePressed

    private void jLabelMacMiniMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelMacMiniMousePressed
        // TODO add your handling code here:
        jTextFieldProductType.setText("Computer");
        jTextFieldProductName.setText("Mac Mini");
        jTextFieldPrice.setText("599");
        jTextDescription.setText("Mac mini is a powerful desktop for content creation. Run more plug‑ins and layer more audio tracks in Logic Pro. ");
    }//GEN-LAST:event_jLabelMacMiniMousePressed

    private void jLabelMBA13MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelMBA13MousePressed
        // TODO add your handling code here:

        jTextFieldProductName.setText("Macbook Air");
        jTextFieldPrice.setText("$1,199.00");
         jTextFieldProductType.setText("Computer");
        jTextDescription.setText("Features all-day battery life and an all-new design with 13.6” Liquid Retina display and 1080p HD camera.");
    }//GEN-LAST:event_jLabelMBA13MousePressed

    private void jLabelMacbookpro16MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelMacbookpro16MousePressed
        // TODO add your handling code here:

        //Macbook Pro
        //jTextFieldProductID.setText();
        jTextFieldProductType.setText("Computer");
        jTextDescription.setText("Each can be configured with the M2 Pro or M2 Max chip and offers next-level pro performance in a laptop.");
        jTextFieldProductName.setText("Macbook Pro");
        jTextFieldPrice.setText("$2499");
    }//GEN-LAST:event_jLabelMacbookpro16MousePressed

    private void jTextFieldProductNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldProductNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldProductNameActionPerformed

    private void jButtonUserDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUserDeleteActionPerformed
        // TODO add your handling code here:
        if(!jTextFieldUsertID.getText().isEmpty()){
            int ID = Integer.parseInt(jTextFieldUsertID.getText().trim());
            String fName = jTextFieldFirstName.getText().trim();
            String lName = jTextFieldLastName.getText().trim();

            User user = getUser(ID);
            if(user.getUserID() !=-1){
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete Confirmation",JOptionPane.YES_NO_OPTION);
                if(option == 0){
                    deleteUser(ID,fName, lName);
                    clearUserTextFields();
                }
                refreshUsersTable();
            }

        }
        else
        {
            alert("User does not exist", "Delete error");
        }
    }//GEN-LAST:event_jButtonUserDeleteActionPerformed

    private void jButtonUserUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUserUpdateActionPerformed
        // TODO add your handling code here:
        if(!jTextFieldUsertID.getText().isEmpty() && !jTextFieldFirstName.getText().isEmpty() && !jTextFieldLastName.getText().isEmpty()){
            int ID = Integer.parseInt(jTextFieldUsertID.getText().trim());
            String fName = jTextFieldFirstName.getText().trim();
            String lName = jTextFieldLastName.getText().trim();

            User user = getUser(ID);
            if(user.getUserID() !=-1){
                updateUser(ID,fName,lName);
                refreshUsersTable();
            }

        }
        else
        {
            alert("ID does not exist", "Update error");
        }
    }//GEN-LAST:event_jButtonUserUpdateActionPerformed

    private void jTableUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableUserMouseClicked
        // TODO add your handling code here:
        int i = jTableUser.getSelectedRow();
        TableModel model = jTableUser.getModel();
        jTextFieldUsertID.setText(model.getValueAt(i, 0).toString());
        jTextFieldFirstName.setText(model.getValueAt(i, 1).toString());
        jTextFieldLastName.setText(model.getValueAt(i, 2).toString());
    }//GEN-LAST:event_jTableUserMouseClicked

    private void jTextFieldFirstNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldFirstNameKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();

        if(!Character.isLetter(c)){
            evt.consume();
        }
        if ((jTextFieldFirstName.getText() + evt.getKeyChar()).length() > 20) {
        evt.consume();
    }
    }//GEN-LAST:event_jTextFieldFirstNameKeyTyped

    private void jTextFieldFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldFirstNameActionPerformed

    private void jTextFieldLastNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldLastNameKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();

        if(!Character.isLetter(c)){
            evt.consume();
        }
        if ((jTextFieldLastName.getText() + evt.getKeyChar()).length() > 20) {
        evt.consume();
    }
    }//GEN-LAST:event_jTextFieldLastNameKeyTyped

    private void jTextFieldLastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldLastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldLastNameActionPerformed

    private void jTextFieldUsertIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldUsertIDKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();

        if(!Character.isDigit(c)){
            evt.consume();
        }
        if ((jTextFieldUsertID.getText() + evt.getKeyChar()).length() > 5) {
        evt.consume();
    }
    }//GEN-LAST:event_jTextFieldUsertIDKeyTyped

    private void jButtonEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEnterActionPerformed
        // TODO add your handling code here:
        if(!jTextFieldUsertID.getText().isEmpty() && !jTextFieldFirstName.getText().isEmpty() && !jTextFieldLastName.getText().isEmpty() ){
            int ID = Integer.parseInt(jTextFieldUsertID.getText().trim());
            String fName = jTextFieldFirstName.getText().trim();
            String lName = jTextFieldLastName.getText().trim();

            if(!primaryKeyViolaionUser(ID)){
                addUser(ID, fName,lName);
                refreshUsersTable();
                clearUserTextFields();

            }
        }
        else
        {
            alert("Fields cannot be empty", "Insert error");
        }
        
    }//GEN-LAST:event_jButtonEnterActionPerformed

    private void jButtonEnterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonEnterMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonEnterMouseClicked

    private void jButtonReviewDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReviewDeleteActionPerformed
        // TODO add your handling code here:
        if(!jTextFieldReviewID.getText().isEmpty()){
            int ID = Integer.parseInt(jTextFieldReviewID.getText().trim());
            int UID = Integer.parseInt(jTextFieldReviewUserID.getText().trim());
            int PID = Integer.parseInt(jTextFieldReviewProductID.getText().trim());
            int rating = Integer.parseInt(jTextFieldReviewRating.getText().trim());
            String comment = jTextAreaReviewComment.getText().trim();

            Review review = getReview(ID);
            if(review.getReviewID() !=-1){
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete Confirmation",JOptionPane.YES_NO_OPTION);
                if(option == 0){
                    deleteReview(ID,UID,PID,rating, comment);
                    clearReviewTextFields();
                }
                refreshReviewTable();
            }

        }
        else
        {
            alert("Review does not exist", "Delete error");
        }
    }//GEN-LAST:event_jButtonReviewDeleteActionPerformed

    private void jButtonReviewUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReviewUpdateActionPerformed
        // TODO add your handling code here:
        if(!jTextFieldReviewID.getText().isEmpty() && !jTextFieldReviewUserID.getText().isEmpty() && !jTextFieldReviewProductID.getText().isEmpty() && !jTextFieldReviewRating.getText().isEmpty()&&!jTextAreaReviewComment.getText().isEmpty()){
            int rID = Integer.parseInt( jTextFieldReviewID.getText().trim());
            int uID = Integer.parseInt( jTextFieldReviewUserID.getText().trim());
            int pID = Integer.parseInt( jTextFieldReviewProductID.getText().trim());
            int ratID = Integer.parseInt( jTextFieldReviewRating.getText().trim());
            String comment = jTextAreaReviewComment.getText().trim();

            Review review = getReview(rID);
            if(review.getReviewID() !=-1){
                updateReview(rID,uID,pID,ratID, comment);
                refreshReviewTable();
            }

        }
        else
        {
            alert("Fields does not exist", "Update error");
        }
    }//GEN-LAST:event_jButtonReviewUpdateActionPerformed

    private void jButtonReviewEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReviewEnterActionPerformed
        // TODO add your handling code here:
        if(!jTextFieldReviewID.getText().isEmpty() && !jTextFieldReviewUserID.getText().isEmpty() && !jTextFieldReviewProductID.getText().isEmpty() && !jTextFieldReviewRating.getText().isEmpty()&&!jTextAreaReviewComment.getText().isEmpty()){
            int ID = Integer.parseInt(jTextFieldReviewID.getText().trim());
            int userID = Integer.parseInt(jTextFieldReviewUserID.getText().trim());
            int productID = Integer.parseInt(jTextFieldReviewProductID.getText().trim());
            int rating = Integer.parseInt(jTextFieldReviewRating.getText().trim());
            String comment = jTextAreaReviewComment.getText().trim();

            if(!primaryKeyViolaionReview(ID) && !foreignKeyViolationReview(userID) && !foreignKeyViolationReviewroduct(productID)){
                addReview(ID, userID, productID, rating,comment);
                refreshReviewTable();
                clearReviewTextFields();

            }
        }
        else
        {
            alert("Fields cannot be empty", "Insert error");
        }
    }//GEN-LAST:event_jButtonReviewEnterActionPerformed

    private void jTextFieldReviewUserIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldReviewUserIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldReviewUserIDActionPerformed

    private void jTableReviewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableReviewMouseClicked
        // TODO add your handling code here:
        int i = jTableReview.getSelectedRow();
        TableModel model = jTableReview.getModel();
        jTextFieldReviewID.setText(model.getValueAt(i, 0).toString());
        jTextFieldReviewUserID.setText(model.getValueAt(i, 1).toString());
        jTextFieldReviewProductID.setText(model.getValueAt(i, 2).toString());
        jTextFieldReviewRating.setText(model.getValueAt(i, 3).toString());
        jTextAreaReviewComment.setText(model.getValueAt(i, 4).toString());
    }//GEN-LAST:event_jTableReviewMouseClicked

    private void jTextFieldProductIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldProductIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldProductIDActionPerformed

    private void jTextFieldProductIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldProductIDKeyTyped
        // TODO add your handling code here:
         char c = evt.getKeyChar();

        if(!Character.isDigit(c)){
            evt.consume();
        }
        if ((jTextFieldProductID.getText() + evt.getKeyChar()).length() > 5) {
        evt.consume();
    }
    }//GEN-LAST:event_jTextFieldProductIDKeyTyped

    private void jTextFieldReviewIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldReviewIDKeyTyped
        // TODO add your handling code here:
         char c = evt.getKeyChar();

        if(!Character.isDigit(c)){
            evt.consume();
        }
        if ((jTextFieldReviewID.getText() + evt.getKeyChar()).length() > 5) {
        evt.consume();
    }
        
          

  
    }//GEN-LAST:event_jTextFieldReviewIDKeyTyped

    private void jTextFieldReviewUserIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldReviewUserIDKeyTyped
        // TODO add your handling code here:
         char c = evt.getKeyChar();

        if(!Character.isDigit(c)){
            evt.consume();
        }
         if ((jTextFieldReviewUserID.getText() + evt.getKeyChar()).length() > 5) {
        evt.consume();
    }

    }//GEN-LAST:event_jTextFieldReviewUserIDKeyTyped

    private void jTextFieldProductTypeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldProductTypeKeyTyped
        // TODO add your handling code here:
          char c = evt.getKeyChar();

        if(!Character.isLetter(c)){
            evt.consume();
        }
        if ((jTextFieldProductType.getText() + evt.getKeyChar()).length() > 5) {
        evt.consume();
    }
        
    }//GEN-LAST:event_jTextFieldProductTypeKeyTyped

    private void jTextDescriptionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextDescriptionKeyTyped
        // TODO add your handling code here:
       // if ((jTextDescription.getText() + evt.getKeyChar()).length() > 48) {
        //evt.consume();
    //}

    }//GEN-LAST:event_jTextDescriptionKeyTyped

    private void jTextAreaReviewCommentKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaReviewCommentKeyTyped
        // TODO add your handling code here:
       if ((jTextAreaReviewComment.getText() + evt.getKeyChar()).length() > 48) {
        evt.consume();
    }
    
    }//GEN-LAST:event_jTextAreaReviewCommentKeyTyped

    private void jTextFieldReviewIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldReviewIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldReviewIDActionPerformed

    private void jTextFieldReviewRatingKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldReviewRatingKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();

        if(!Character.isDigit(c)){
            evt.consume();
        }
        if ((jTextFieldReviewRating.getText() + evt.getKeyChar()).length() > 1) {
            evt.consume();
        }

    }//GEN-LAST:event_jTextFieldReviewRatingKeyTyped

    private void jTextFieldReviewProductIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldReviewProductIDKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();

        if(!Character.isDigit(c)){
            evt.consume();
        }
        if ((jTextFieldReviewProductID.getText() + evt.getKeyChar()).length() > 5) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldReviewProductIDKeyTyped

    private void jComboBoxRatingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRatingActionPerformed
        // TODO add your handling code here:
        String selectedValue = jComboBoxRating.getSelectedItem().toString();
        jTextFieldReviewRating.setText(selectedValue);
    }//GEN-LAST:event_jComboBoxRatingActionPerformed

    private void jTextFieldProductTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldProductTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldProductTypeActionPerformed

    private void jTextFieldPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPriceKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPriceKeyPressed

    private void jTextFieldPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPriceKeyTyped
        // TODO add your handling code here:
              char c = evt.getKeyChar();

        if(!Character.isLetter(c)){
            evt.consume();
        }
        if ((jTextFieldLastName.getText() + evt.getKeyChar()).length() > 20) {
        evt.consume();
    }
    }//GEN-LAST:event_jTextFieldPriceKeyTyped

    
//extFld name setText (getT@xt from selected it. txtCmb. setText (cmbItem.getSelectedItem () .toString () );
    
    
    
    
    
  //Alerts user with error
    public void alert(String msg, String title){
        JOptionPane.showMessageDialog(rootPane, msg, title, JOptionPane.ERROR_MESSAGE);
    }
    
    public void added(String msg, String title){
        JOptionPane.showMessageDialog(rootPane, msg, title, JOptionPane.OK_OPTION);
    }
    //Adds user to database
    static void addUser(int UserId, String FirstName, String LastName) {
     User user;
     user = new User(UserId, FirstName, LastName);
     userDAO.insert(user);
 }
    //updates user
     private static void updateUser(int UserId, String FirstName, String LastName) {
        User user;
        user = new User(UserId, FirstName, LastName);
        userDAO.update(user);
     }
     //deletes user
       private static void deleteUser(int UserId, String FirstName, String LastName) {
        User user;
        user = new User(UserId, FirstName, LastName);
        userDAO.delete(user);
    }
         //Gets the user
      private static User getUser(int UserId) {
        Optional<User> user = userDAO.get(UserId);
        return user.orElseGet(() -> new User(-1, "Non-exist", "Non-exist"));
    }
               //Gets the product
      private static Product getProduct(int ProductID) {
        Optional<Product> product = productDAO.get(ProductID);
        return product.orElseGet(() -> new Product(-1, "Non-exist", "Non-exist", "Non-exist", "Non-exist"));
    }
       //Adds product to database
    static void addProduct(int ProductID, String ProductType, String ProductName, String Price, String Description) {
     Product product;
     product = new Product(ProductID, ProductType, ProductName, Price, Description);
     productDAO.insert(product);
 }
      //updates product
      private static void updateProduct(int ProductID, String ProductType, String ProductName, String Price, String Description) {
        Product product;
        product = new Product(ProductID, ProductType, ProductName, Price, Description);
        productDAO.update(product);
     }
      //deletes product
       private static void deleteProduct(int ProductID, String ProductType, String ProductName, String Price, String Description) {
        Product product;
        product = new Product(ProductID, ProductType, ProductName, Price, Description);
        productDAO.delete(product);
    }
      
      //Gets review
         private static Review getReview(int ReviewID) {
        Optional<Review> review = reviewDAO.get(ReviewID);
        return review.orElseGet(() -> new Review(-1, -1, -1, -1,"Non-exist" ));
    }
         //adds review
     static void addReview(int ReviewID, int UserID, int ProductID, int Rating, String Comment) {
     Review review;
     review = new Review(ReviewID, UserID, ProductID, Rating,Comment );
     reviewDAO.insert(review);
 }
         //updates review
     private static void updateReview(int ReviewID, int UserID, int ProductID, int Rating, String Comment) {
        Review review;
        review = new Review(ReviewID, UserID, ProductID, Rating, Comment );
        reviewDAO.update(review);
     }
     //deletes review
       private static void deleteReview(int ReviewID, int UserID, int ProductID, int Rating, String Comment) {
        Review review;
        review = new Review(ReviewID, UserID, ProductID, Rating, Comment );
        reviewDAO.delete(review);
    }
    
    //Primary key violation for user
    public boolean primaryKeyViolaionUser(int id){
        if(getUser(id).getUserID() !=-1){
            alert("Another user already exists with same user ID, please try another ID", "Primary Key Violation");
            return true;
        }else{
            return false;
        }
    }
    
       public boolean primaryKeyViolaionProduct(int id){
        if(getProduct(id).getProductID() !=-1){
            alert("Another product already exists with same product ID, please try another ID", "Primary Key Violation");
            return true;
        }else{
            return false;
        }
    }
       
          public boolean primaryKeyViolaionReview(int id){
        if(getReview(id).getReviewID() !=-1){
            alert("Another review already exists with same review ID, please try another ID", "Primary Key Violation");
            return true;
        }else{
            return false;
        }
    }
                

               public boolean foreignKeyViolationReview(int id){
         if(getUser(id).getUserID()==-1){
             alert("user ID does not exist", "Foreign Key Violation");
             return true;
     
         }else{
             return false;
               }
               }
            
               
                 public boolean foreignKeyViolationReviewroduct(int id){
         if(getProduct(id).getProductID()==-1){
             alert("product ID does not exist", "Foreign Key Violation");
             return true;
     
         }else{
             return false;
               }
               }

               
    //Refresh Table for User ID
    
    private void refreshUsersTable(){
        List<User>users = userDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableUser.getModel();
        
        for(int i = model.getRowCount() -1; i>=0; i--){
            model.removeRow(i);
        }
        for(User user : users){
            Object[] row = new Object[3];
            row[0] = user.getUserID();
            row[1] = user.getFirstName();
            row[2] = user.getLastName();
            
            model.addRow(row);
        }
    }
        //Refresh Table for User ID
    
    private void refreshProductTable(){
        List<Product>products = productDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableProduct.getModel();
        
        for(int i = model.getRowCount() -1; i>=0; i--){
            model.removeRow(i);
        }
        for(Product product : products){
            Object[] row = new Object[5];
            row[0] = product.getProductID();
            row[1] = product.getProductType();
            row[2] = product.getProductName();
            row[3] = product.getPrice();
            row[4] = product.getDescription();
            
            model.addRow(row);
        }
    }
      //Refresh Table for review 
         private void refreshReviewTable(){
        List<Review>reviews = reviewDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableReview.getModel();
        
        for(int i = model.getRowCount() -1; i>=0; i--){
            model.removeRow(i);
        }
        for(Review review : reviews){
            Object[] row = new Object[5];
            row[0] = review.getReviewID();
            row[1] = review.getReviewUserID();
            row[2] = review.getReviewProductID();
            row[3] = review.getRating();
            row[4] = review.getComment();
            
            model.addRow(row);
        }
    }
    //Clears User Table
     private void clearUserTextFields(){
        jTextFieldUsertID.setText("");
        jTextFieldFirstName.setText("");
        jTextFieldLastName.setText("");
        
        
    }
         //Clears product Table
     private void clearProductTextFields(){
        jTextFieldProductID.setText("");
        jTextFieldProductType.setText("");
         jTextFieldProductName.setText("");
          jTextFieldPrice.setText("");
        jTextDescription.setText("");
        
        
    }
     
         //Clears User Table
     private void clearReviewTextFields(){
        jTextFieldReviewID.setText("");
        jTextFieldReviewUserID.setText("");
        jTextFieldReviewProductID.setText("");
        jTextFieldReviewRating.setText("");
        jTextAreaReviewComment.setText("");
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        userDAO = new UserDAO();
        reviewDAO = new ReviewDAO();
        productDAO = new ProductDAO();
        /* Set the Nimbus look and feel */
         
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonEnter;
    private javax.swing.JButton jButtonProductEnter;
    private javax.swing.JButton jButtonReviewDelete;
    private javax.swing.JButton jButtonReviewEnter;
    private javax.swing.JButton jButtonReviewUpdate;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JButton jButtonUserDelete;
    private javax.swing.JButton jButtonUserUpdate;
    private javax.swing.JComboBox<String> jComboBoxRating;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelAirpods;
    private javax.swing.JLabel jLabelAirpodsPro;
    private javax.swing.JLabel jLabelAppleWatch8;
    private javax.swing.JLabel jLabelAppleWatchUltra;
    private javax.swing.JLabel jLabelFirstName;
    private javax.swing.JLabel jLabelLastName;
    private javax.swing.JLabel jLabelMBA13;
    private javax.swing.JLabel jLabelMacMini;
    private javax.swing.JLabel jLabelMacbookpro16;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelPrice;
    private javax.swing.JLabel jLabelProductID;
    private javax.swing.JLabel jLabelProductType;
    private javax.swing.JLabel jLabelRating;
    private javax.swing.JLabel jLabelReview;
    private javax.swing.JLabel jLabelReviewUserID;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JLabel jLabelUserId;
    private javax.swing.JLabel jLabeliPadAir;
    private javax.swing.JLabel jLabeliPadPro;
    private javax.swing.JLabel jLabeliPhone14;
    private javax.swing.JLabel jLabeliPhone14Pro;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableProduct;
    private javax.swing.JTable jTableReview;
    private javax.swing.JTable jTableUser;
    private javax.swing.JTextArea jTextAreaReviewComment;
    private javax.swing.JTextArea jTextDescription;
    private javax.swing.JTextField jTextFieldFirstName;
    private javax.swing.JTextField jTextFieldLastName;
    private javax.swing.JTextField jTextFieldPrice;
    private javax.swing.JTextField jTextFieldProductID;
    private javax.swing.JTextField jTextFieldProductName;
    private javax.swing.JTextField jTextFieldProductType;
    private javax.swing.JTextField jTextFieldReviewID;
    private javax.swing.JTextField jTextFieldReviewProductID;
    private javax.swing.JTextField jTextFieldReviewRating;
    private javax.swing.JTextField jTextFieldReviewUserID;
    private javax.swing.JTextField jTextFieldUsertID;
    // End of variables declaration//GEN-END:variables
}
